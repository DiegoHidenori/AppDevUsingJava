import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class Main{
    public static void main(String[] args){
        List<QuizQuestion> questionBank = new ArrayList<>();
        questionBank.add(new QuizQuestion("What is the significance of a semicolon in Java Source Code?", "1) You can add a kangaroo to the program.", "2) It is the character that terminates a statement"));

        int score = 0;
        Scanner scanner = new Scanner(System.in);
        QuizTimer timer = new QuizTimer();
        System.out.println("Java Midterm Quiz Practice");

        while(true){
            System.out.println("\nWhat would you like to do now?");
            System.out.println("1) Start the quiz");
            System.out.println("2) Exit the program");
            System.out.print("User: ");
            int user = getValidIntegerInput(scanner);
            System.out.println();
            switch(user){
                case 1:
                    Collections.shuffle(questionBank); // To shuffle the order of questions
                    timer.start();
                    for (int i = 0; i < questionBank.size(); i++){
                        QuizQuestion question = questionBank.get(i);
                        System.out.println("Question " + (i + 1) + ": " + question.getQuestion());
                        List<String> answerOptions = question.getShuffledAnswerOptions();
                        for (String option : question.getAnswerOptions()){
                            System.out.println(option);
                        }
                        System.out.print("Answer: ");
                        String answer = scanner.nextLine().trim();
                        if (answer.equalsIgnoreCase(question.getCorrectAnswer())){
                            System.out.println("Correct\n");
                            score ++;
                        }
                        else{
                            System.out.println("Incorrect. The correct answer is " + question.getCorrectAnswer() + "\n");
                        }
                    }
                    System.out.println("Quiz completed. Your score: " + score + " out of " + questionBank.size());
                    timer.stop();
                    System.out.println("Quiz completed in " + (timer.getElapsedTime()/1000)/60 + " minutes.");
                    break;
                case 2:
                    System.exit(0);
                    break;
                default:
                    break;
            }
        }
    }
    private static int getValidIntegerInput(Scanner scanner){
        while (!scanner.hasNextInt()){
            scanner.next();
            System.out.println("Invalid input. Enter a valid integer...");
        }
        int input = scanner.nextInt();
        scanner.nextLine();
        return input;
    }
}
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
public class QuizQuestion {
    private String question;
    private String[] answerOptions;
    private String correctAnswer;

    public QuizQuestion(String question, String... answerOptions){
        this.question = question;
        this.answerOptions = new ArrayList<>();
        for (String option : answerOptions){
            this.answerOptions.add(option);
        }
        this.correctAnswer = answerOptions[answerOptions.length - 1].substring(0,1);
        this.answerOptions.remove(this.correctAnswer);
    }

    public String getQuestion(){
        return question;
    }
    public List<String> getShuffledAnswerOptions(){
        List<String> shuffledOptions = new ArrayList<>(answerOptions);
        shuffledOptions.add(correctAnswer);
        Collections.shuffle(shuffledOptions);
        return shuffledOptions;
    }
    public String getCorrectAnswer(){
        return correctAnswer;
    }
}
public class QuizTimer {
    private long startTime;
    private long endTime;

    public void start(){
        startTime = System.currentTimeMillis();
    }
    public void stop(){
        endTime = System.currentTimeMillis();
    }
    public long getElapsedTime(){
        if(startTime == 0){
            throw new IllegalStateException("Timer has not been started.");
        }
        if(endTime == 0){
            throw new IllegalStateException("Timer has not been stopped.");
        }
        return endTime - startTime;
    }
}
